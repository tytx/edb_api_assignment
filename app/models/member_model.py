# generated by datamodel-codegen:
#   filename:  member.spec.yaml
#   timestamp: 2025-09-27T07:03:33+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field, field_validator, ValidationError
from utils.sanitization import sanitize_name, validate_phone_number, sanitize_phone_number


class MemberCreate(BaseModel):
    firstName: str = Field(..., min_length=1, max_length=100, description="First name of the member")
    lastName: str = Field(..., min_length=1, max_length=100, description="Last name of the member")
    email: EmailStr = Field(..., description="Valid email address")
    phone: Optional[str] = Field(None, max_length=20, description="Phone number")
    age: Optional[int] = Field(None, ge=0, le=150, description="Age between 0 and 150")
    isEmployee: Optional[bool] = None

    @field_validator('firstName', 'lastName')
    @classmethod
    def sanitize_names(cls, v: str) -> str:
        """Sanitize name fields to prevent XSS"""
        if not v or not v.strip():
            raise ValueError('Name cannot be empty or whitespace only')
        sanitized = sanitize_name(v)
        if not sanitized:
            raise ValueError('Name contains invalid characters')
        return sanitized

    @field_validator('phone')
    @classmethod
    def validate_and_sanitize_phone(cls, v: Optional[str]) -> Optional[str]:
        """Validate and sanitize phone number"""
        if v is None:
            return v
        if not validate_phone_number(v):
            raise ValueError('Invalid phone number format. Use format: +1234567890 or 1234567890')
        return sanitize_phone_number(v)

    @field_validator('age')
    @classmethod
    def validate_age(cls, v: Optional[int]) -> Optional[int]:
        """Additional age validation"""
        if v is not None and (v < 0 or v > 150):
            raise ValueError('Age must be between 0 and 150')
        return v


class Member(BaseModel):
    id: UUID
    firstName: str
    lastName: str
    email: EmailStr
    phone: Optional[str] = None
    age: Optional[int] = None
    isEmployee: Optional[bool] = None
    createdAt: datetime


class MembersResponse(BaseModel):
    message: str = Field(..., example='Members retrieved successfully')
    members: List[Member]


class ErrorResponse(BaseModel):
    message: str
